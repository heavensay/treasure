<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.github.heavensay</groupId>
        <artifactId>treasure-parent-bom</artifactId>
        <version>${revision}</version>
        <relativePath>treasure-parent-bom/pom.xml</relativePath>
    </parent>

    <groupId>com.github.heavensay</groupId>
    <artifactId>treasure-parent</artifactId>
    <packaging>pom</packaging>
    <name>${project.artifactId}</name>
    <description>the parent project of treasure</description>

    <properties>
        <!-- common properties -->
        <skip_maven_deploy>false</skip_maven_deploy>
        <project.build.sourceEncoding>${charset.common}</project.build.sourceEncoding>

        <!-- Test libs -->
        <junit_version>4.13.1</junit_version>
        <jmockit.version>1.49</jmockit.version>


        <java.version>1.8</java.version>

        <!-- for maven compiler plugin -->
        <java_source_version>1.8</java_source_version>
        <java_target_version>1.8</java_target_version>
    </properties>

    <modules>
        <module>treasure-parent-bom</module>
        <module>treasure-common</module>
        <module>treasure-datatrail</module>
        <module>treasure-demo</module>
        <module>treasure-spring</module>
        <module>treasure-package</module>
        <module>treasure-dict</module>
        <module>treasure-design-pattern</module>
    </modules>

    <dependencies>
        <dependency>
            <groupId>org.jmockit</groupId>
            <artifactId>jmockit</artifactId>
            <version>${jmockit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit_version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>release</id>
            <build>
                <plugins>
                    <plugin>
                        <!-- nexus本身有一套发布jar的流程nexus-staging-maven-plugin插件可以是nexus流程处理的客户端.
                            autoReleaseAfterClose:在close只有自动release,这样不需要上OSSRH网站上手动执行这两部操作
                         -->
                        <groupId>org.sonatype.plugins</groupId>
                        <artifactId>nexus-staging-maven-plugin</artifactId>
                        <extensions>true</extensions>
                        <configuration>
                            <serverId>ossrh</serverId>
                            <nexusUrl>https://oss.sonatype.org/</nexusUrl>
                            <autoReleaseAfterClose>true</autoReleaseAfterClose>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>attach-javadocs</id>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                                <configuration>
                                    <!-- java docs生成的时候检验不严格，warning警告，而不是报错误 -->
                                    <doclint>none</doclint>
                                </configuration>
                            </execution>
                        </executions>
                        <configuration>
                            <show>public</show>
                            <charset>${charset.common}</charset>
                            <encoding>${charset.common}</encoding>
                            <docencoding>${charset.common}</docencoding>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>attach-sources</id>
                                <goals>
                                    <goal>jar-no-fork</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <build>
        <plugins>
            <!-- 子模块通用的插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <compilerArgument>-proc:none</compilerArgument>
                    <fork>true</fork>
                    <source>${java_source_version}</source>
                    <target>${java_target_version}</target>
                    <encoding>${charset.common}</encoding>
                </configuration>
            </plugin>
            <!--使单元测试不影响项目的编译-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skip>true</skip><!--跳过单元测试-->
                    <!--<testFailureIgnore>true</testFailureIgnore>--><!--这个网上很多的解决方式是这个,其实这个,其实这个配置后打包还是会编译单元测试类的,只是忽略编译单元测试类的错误.-->
                    <argLine>-javaagent:${settings.localRepository}/org/jmockit/jmockit/1.49/jmockit-1.49.jar</argLine>
                    <useSystemClassLoader>true</useSystemClassLoader>
                </configuration>
            </plugin>

<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-surefire-plugin</artifactId>-->
<!--                <version>2.21.0</version>-->
<!--                <configuration>-->
<!--                    <argLine>-javaagent:${settings.localRepository}/org/jmockit/jmockit/1.49/jmockit-1.49.jar</argLine>-->
<!--                    <useSystemClassLoader>true</useSystemClassLoader>-->
<!--                </configuration>-->
<!--            </plugin>-->

            <!--  -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <configuration>
                    <skip>${skip_maven_deploy}</skip>
                </configuration>
            </plugin>

            <!-- 在install，deploy前，对生成的pom进行操作，对变量的替换等，可以对revision变量进行替换 -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>flatten-maven-plugin</artifactId>
                <configuration>
                    <updatePomFile>true</updatePomFile>
                    <flattenMode>resolveCiFriendliesOnly</flattenMode>
                </configuration>
                <executions>
                    <execution>
                        <id>flatten</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>flatten</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>flatten.clean</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>